# Path to your oh-my-zsh installation.
export ZSH=/Users/vladsomov/.oh-my-zsh

#ZSH_THEME=gitster
ZSH_THEME=refined

plugins=(git ruby z last-working-dir wd vi-mode zsh-syntax-highlighting)

# User configuration
export PATH="/Users/vladsomov/.rbenv/shims:/usr/local/bin:/usr/local/bin/git:/usr/bin:/bin:/usr/sbin:/sbin:/Users/vladsomov/bin:/usr/local/bin/$HOME/.cargo/bin:$PATH"
export PATH="/usr/local/mysql/bin:$PATH"

#GO
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/Developer/go
export GOBIN=$HOME/Developer/go/bin
export PATH=$PATH:$GOPATH/bin

export PATH="$HOME/anaconda3/bin:$PATH"

source $ZSH/oh-my-zsh.sh

export EDITOR='nvim'

# _gen_fzf_default_opts() {
  #local base03="234"
  #local base02="235"
  #local base01="240"
  #local base00="241"
  #local base0="244"
  #local base1="245"
  #local base2="254"
  #local base3="230"
  #local yellow="136"
  #local orange="166"
  #local red="160"
  #local magenta="125"
  #local violet="61"
  #local blue="33"
  #local cyan="37"
  #local green="64"

  ## Comment and uncomment below for the light theme.

  ## Solarized Dark color scheme for fzf
  ##export FZF_DEFAULT_OPTS="
    ##--color fg:-1,bg:-1,hl:$blue,fg+:$base2,bg+:$base02,hl+:$blue
    ##--color info:$yellow,prompt:$yellow,pointer:$base3,marker:$base3,spinner:$yellow
  ##"
  ### Solarized Light color scheme for fzf
  #export FZF_DEFAULT_OPTS="
   #--color fg:-1,bg:-1,hl:$blue,fg+:$base02,bg+:$base2,hl+:$blue
   #--color info:$yellow,prompt:$yellow,pointer:$base03,marker:$base03,spinner:$yellow
  #"
#}

#_gen_fzf_default_opts
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#export FZF_DEFAULT_OPTS="--color 16,info:6,hl+:1,fg+:10"
export FZF_DEFAULT_OPTS="--color bg+:#283237,info:6,hl:#DEC77A,hl+:#DA797B,fg+:#81F3DC"
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules,tmp,vendor}/*" 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"


# Open workspace in your $EDITOR
compdef wsp=wd
wsp() {
  if [[ $1 != "" ]] then 
    wd $1
    $EDITOR .
  fi
}

#Now fzf (w/o pipe) will use rg instead of find
#
# fshow - git commit browser (enter for show, ctrl-d for diff, ` toggles sort)
fshow() {
  local out shas sha q k
  while out=$(
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" \
          --print-query --expect=ctrl-d --toggle-sort=\`); do
    q=$(head -1 <<< "$out")
    k=$(head -2 <<< "$out" | tail -1)
    shas=$(sed '1,2d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
    [ -z "$shas" ] && continue
    if [ "$k" = ctrl-d ]; then
      git diff --color=always $shas | less -R
    else
      for sha in $shas; do
        git show --color=always $sha | less -R
      done
    fi
  done
}
# Golang alias
  alias golist="go list -f '{{join .Deps \"\n\"}}' | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}'"
#application alias
  alias filetree="ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'"
#config alias
  alias zshrc="nvim ~/.zshrc"
  alias ohmyzsh="open ~/.oh-my-zsh"
  alias xvimrc="nvim ~/.xvimrc"
  alias nvimrc="nvim ~/.config/nvim/init.vim"

  alias be="bundle exec"
  alias fproc="ps aux| grep"
  alias kill_all="pkill -9 -f"
  
  alias ngrok="./ngrok"

# History
# Keep history in this file
  export HISTFILE=~/.zsh_history
# Max history command size
  export HISTCONTROL=ignoredups:erasedups  
  export HISTSIZE=100000                   
  export HISTFILESIZE=100000    
  export SAVEHIST=$HISTSIZE
# enable histroy
  setopt APPEND_HISTORY
# remove repeated,empty, and whitespace commands
  setopt HIST_IGNORE_SPACE
  setopt HIST_REDUCE_BLANKS

# Unarchive file
# example: extract file
  extract () {
   if [ -f $1 ] ; then
   case $1 in
   *.tar.bz2)   tar xjf $1        ;;
   *.tar.gz)    tar xzf $1     ;;
   *.bz2)       bunzip2 $1       ;;
   *.rar)       unrar x $1     ;;
   *.gz)        gunzip $1     ;;
   *.tar)       tar xf $1        ;;
   *.tbz2)      tar xjf $1      ;;
   *.tbz)       tar -xjvf $1    ;;
   *.tgz)       tar xzf $1       ;;
   *.zip)       unzip $1     ;;
   *.Z)         uncompress $1  ;;
   *.7z)        7z x $1    ;;
   *)           echo "I don't know how to extract '$1'..." ;;
   esac
   else
   echo "'$1' is not a valid file"
   fi
  }

# Create archive
# example: pk tar file
pk () {
 if [ $1 ] ; then
 case $1 in
 tbz)       tar cjvf $2.tar.bz2 $2      ;;
 tgz)       tar czvf $2.tar.gz  $2       ;;
 tar)      tar cpvf $2.tar  $2       ;;
 bz2)    bzip $2 ;;
 gz)        gzip -c -9 -n $2 > $2.gz ;;
 zip)       zip -r $2.zip $2   ;;
 7z)        7z a $2.7z $2    ;;
 *)         echo "'$1' cannot be packed via pk()" ;;
 esac
 else
 echo "'$1' is not a valid file"
 fi
}
eval "$(rbenv init -)"
