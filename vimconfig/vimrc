syntax on
set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin('~/.vim/plugged')
Plug 'altercation/vim-colors-solarized'
Plug 'yggdroot/indentline'

Plug 'justinmk/vim-dirvish'
  let dirvish_mode = ':sort | sort ,^.*/,'
  nnoremap \ :Dirvish<cr>
  autocmd! FileType dirvish setlocal relativenumber

Plug 'foosoft/vim-argwrap'
  nmap <Leader>a :ArgWrap<CR>

" tpope
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-endwise'

Plug 'vim-ruby/vim-ruby'
  let g:ruby_indent_assignment_style = 'variable'

Plug 'scrooloose/nerdcommenter'
  let g:NERDSpaceDelims = 1

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'haya14busa/incsearch.vim'
Plug 'jszakmeister/vim-togglecursor'
Plug 'godlygeek/tabular'

Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries', 'for': 'go' }
  let g:go_fmt_command = "goimports"
  let g:go_highlight_types = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_extra_types = 1
  let g:go_auto_sameids = 1
  let g:go_auto_type_info = 1
  let g:go_term_enabled = 1

Plug 'ervandew/supertab'
  set completeopt-=preview
  set pumheight=10
  let g:loaded_ruby_provider = 1
  let g:SuperTabDefaultCompletionType = 'context'
  let g:SuperTabContextDefaultCompletionType = '<c-n>'

Plug 'christoomey/vim-tmux-navigator'
call plug#end()


set laststatus=0
set hls
set backspace=indent,eol,start
set mouse=a
set clipboard=unnamed
set number
set relativenumber
set ai
set si
set wrap

set nobackup
set nowb
set noswapfile
set noerrorbells                  " No bells!
set novisualbell                  " I said, no bells!
set autowrite

let mapleader = "\<Space>"

colorscheme solarized
set background=light
let g:solarized_bold=1

set completeopt-=preview

set sw=2 ts=2 sts=2
au FileType go setl noexpandtab sw=4 sts=4 ts=4
au FileType swift setl sw=4 sts=4 ts=4
au FileType python setl sw=4 sts=4 ts=4

set expandtab
set splitright
set splitbelow

" Undo
set undofile
set undodir=$HOME/.vim/undo

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Search result to the center
nnoremap n nzz
nnoremap N Nzz

noremap <up>    <C-W>+
noremap <down>  <C-W>-
noremap <left>  3<C-W><
noremap <right> 3<C-W>>

cnoremap <expr> %% expand('%:h').'/'
nnoremap <leader>cd :lcd %:p:h<CR>:pwd<CR>

set shell=zsh
set tags+=.git/tags,.git/rubytags,.git/bundlertags
autocmd FileType ruby setlocal tags+=~/.rbenv/versions/2.4.3/lib/ruby/tags
set tagcase=match
noremap ,gt :!gentags<CR>

" Breakpoints
autocmd! FileType python nnoremap ,b Oimport ipdb; ipdb.set_trace()<ESC>
autocmd! FileType ruby nnoremap ,b Obinding.pry<ESC>
autocmd! FileType coffee nnoremap ,b Odebugger;<ESC>

" Tabular
vmap ,:  :Tabularize /:\zs/l0l1<CR>
vmap ,": :Tabularize /":\zs/l0l1<CR>
vmap ,=  :Tabularize /=<CR>
vmap ,=> :Tabularize /=/l1l1<CR>

nnoremap <leader><leader> :e #<CR>
nnoremap <Leader>w :w<CR>
nnoremap <leader>q :wq<CR>
nnoremap <Leader>x :bd!<CR>
nnoremap <leader>h :hide<CR>
nnoremap <leader>o :only<CR>

nmap <leader>r<CR> *:%s///g<left><left>
nmap <leader>rc<CR> *:%s///gc<left><left><left>

"Paste yanked text
noremap <Leader>p "0p
noremap <Leader>P "0P
vnoremap <Leader>p "0p

"Automatically jump to the end of text pasted
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Ruby
command! Symbolicate  :%s/"\([a-z_]\+\)"/:\1/gc
command! Stringify    :%s/:\([a-z_]\+\)/"\1"/gc
command! NewHash      :%s/"\([^=,'"]*\)"\s\+=> /\1: /gc
command! OldHash      :%s/\(\w*\): \(\w*\)/"\1" => \2/gc

" Fuzzy file finder
let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit'
      \ }
" let g:fzf_layout = { 'height': '~40%' }

imap <c-x><c-l> <plug>(fzf-complete-line)
nnoremap <C-p> :FZF -m<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>co :Commits<CR>
nnoremap <leader>ch :History:<CR>
nnoremap ,t :Tags<CR>

vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>

"using rg for find in project
let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
  \ -g "*.{coffee,haml,hamlc,js,json,rs,go,rb,py,swift,scss}"
  \ -g "!{.git,node_modules,vendor,log,swp,tmp,venv,__pychache__}/*" '
command! -bang -nargs=* F
                 \ call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1,
                 \ fzf#vim#with_preview(),
                 \ <bang>0)
nnoremap <leader>f :F<CR>

command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ 'rg --column --line-number --no-heading --color=always --ignore-case '.shellescape(<q-args>), 1,
      \ fzf#vim#with_preview(),
      \ <bang>0)

nnoremap <leader>rg :Rg <C-R><C-W><CR>
vnoremap <leader>rg y:Rg <C-R>"<CR>

if executable('rg')
    set grepprg=rg\ --no-heading\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

"incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

augroup filetype
  au! BufRead,BufNewFile *.proto set filetype=proto
  au BufRead,BufNewFile Podfile set filetype=ruby
  au BufRead,BufNewFile Dangerfile set filetype=ruby
  au BufRead,BufNewFile Fastfile set filetype=ruby

  au BufRead,BufNewFile *.gohtml set filetype=html
  au BufRead,BufNewFile *.pbxproj set syntax=xml

  au BufRead,BufNewFile *.hamlc setlocal ft=haml
  au BufRead /tmp/psql.edit.* set syntax=sql
augroup end

autocmd FileType *
    \ if &omnifunc != '' |
    \   call SuperTabChain(&omnifunc, "<c-n>") |
    \ endif

" Highlight merge conflict markers
match Todo '\v^(\<|\=|\>){7}([^=].+)?$'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN TEST AND PRODUCTION CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! OpenTestAlternateSplit()
  let new_file = AlternateForCurrentFile()
  exec ':vsp ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<workers\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.e\?rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif

  return new_file
endfunction

nnoremap <leader>. :call OpenTestAlternate()<cr>
nnoremap <leader>s. :call OpenTestAlternateSplit()<cr>

